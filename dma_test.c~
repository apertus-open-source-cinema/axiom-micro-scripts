/*
Of of concept offloaded memcopy using AXI Direct Memory Access v7.1
 */

#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <termios.h>
#include <sys/mman.h>
#include <string.h>

#define S2MM_CONTROL_REGISTER 0x30
#define S2MM_STATUS_REGISTER 0x34
#define S2MM_DESTINATION_ADDRESS 0x48
#define S2MM_LENGTH 0x58

unsigned int dma_set(unsigned int* dma_virtual_address, int offset, unsigned int value) {
    dma_virtual_address[offset>>2] = value;
}

unsigned int dma_get(unsigned int* dma_virtual_address, int offset) {
    return dma_virtual_address[offset>>2];
}

void dma_s2mm_status(unsigned int* dma_virtual_address) {
    unsigned int status = dma_get(dma_virtual_address, S2MM_STATUS_REGISTER);
    printf("Stream to memory-mapped status (0x%08x@0x%02x):", status, S2MM_STATUS_REGISTER);
    if (status & 0x00000001) printf(" halted"); else printf(" running");
    if (status & 0x00000002) printf(" idle");
    if (status & 0x00000008) printf(" SGIncld");
    if (status & 0x00000010) printf(" DMAIntErr");
    if (status & 0x00000020) printf(" DMASlvErr");
    if (status & 0x00000040) printf(" DMADecErr");
    if (status & 0x00000100) printf(" SGIntErr");
    if (status & 0x00000200) printf(" SGSlvErr");
    if (status & 0x00000400) printf(" SGDecErr");
    if (status & 0x00001000) printf(" IOC_Irq");
    if (status & 0x00002000) printf(" Dly_Irq");
    if (status & 0x00004000) printf(" Err_Irq");
    printf("\n");
}

void memdump(void* virtual_address, int byte_count) {
    char *p = virtual_address;
    int offset;
    for (offset = 0; offset < byte_count; offset++) {
        printf("%02x", p[offset]);
        if (offset % 4 == 3) { printf(" "); }
    }
    printf("\n");
}

int dma_s2mm_sync(unsigned int* dma_virtual_address, unsigned int* dest) {
    unsigned int s2mm_status = dma_get(dma_virtual_address, S2MM_STATUS_REGISTER);
    while(!(s2mm_status & 0x2) && !(s2mm_status & 0x1)) {
	// printf("%d\n", s2mm_status & 0x2);
//        dma_s2mm_status(dma_virtual_address);

//	memdump(dest, 32);

        s2mm_status = dma_get(dma_virtual_address, S2MM_STATUS_REGISTER);
    }
}

int main() {
    int dest_base = 0x7800000;
    int dh = open("/dev/mem", O_RDWR | O_SYNC); // Open /dev/mem which represents the whole physical memory
    int outfile = open("dump.ram", O_RDWR | O_CREAT);
    size_t size = 1 << 27;
    lseek(outfile, size - 1, SEEK_SET);
    write(outfile, "", 1);
    unsigned int * out_map = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, outfile, 0);
	

    unsigned int* virtual_address = mmap(NULL, 65535, PROT_READ | PROT_WRITE, MAP_SHARED, dh, 0x40400000); // Memory map AXI Lite register block
    unsigned int* virtual_destination_address = mmap(NULL, 65535, PROT_READ | PROT_WRITE, MAP_SHARED, dh, dest_base); // Memory map destination address

    size_t blksize = 1 << 16;



    for(int pos = 0; pos < size; pos = pos + blksize) {
	int dest = dest_base + pos;
//        printf("Resetting DMA\n");
        dma_set(virtual_address, S2MM_CONTROL_REGISTER, 4);
        dma_s2mm_status(virtual_address);
        // memset(virtual_destination_address, 0, blksize); // Clear destination block
        // printf("Halting DMA\n");
        dma_set(virtual_address, S2MM_CONTROL_REGISTER, 0);
        dma_s2mm_status(virtual_address);
    
        // printf("Destination memory block: "); memdump(virtual_destination_address, blksize);
    
        // printf("Writing destination address\n");
        dma_set(virtual_address, S2MM_DESTINATION_ADDRESS, dest); // Write destination address
        dma_s2mm_status(virtual_address);
    
        // printf("Starting S2MM channel with all interrupts masked...\n");
        dma_set(virtual_address, S2MM_CONTROL_REGISTER, 0xf001);
//        dma_s2mm_status(virtual_address);
    
        // printf("Writing S2MM transfer length...\n");
        dma_set(virtual_address, S2MM_LENGTH, blksize);
//        dma_s2mm_status(virtual_address);
    
        // printf("Waiting for S2MM sychronization...\n");
	/*
        printf("Destination memory block: "); memdump(virtual_destination_address, blksize);
        printf("Destination memory block: "); memdump(virtual_destination_address, blksize);
        printf("Destination memory block: "); memdump(virtual_destination_address, blksize);
	printf("sync\n");
	*/
        dma_s2mm_sync(virtual_address, virtual_destination_address); // If this locks up make sure all memory ranges are assigned under Address Editor!
    } 

    memcpy(out_map, virtual_destination_address, size);
    msync(out_map, size, MS_SYNC);
    munmap(out_map, size);
    close(outfile);
}
